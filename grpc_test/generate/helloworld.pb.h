// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: helloworld.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_helloworld_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_helloworld_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_helloworld_2eproto;
namespace HelloWorld {
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloReply_TransferBytesResp;
struct HelloReply_TransferBytesRespDefaultTypeInternal;
extern HelloReply_TransferBytesRespDefaultTypeInternal _HelloReply_TransferBytesResp_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class HelloRequest_TransferBytesReq;
struct HelloRequest_TransferBytesReqDefaultTypeInternal;
extern HelloRequest_TransferBytesReqDefaultTypeInternal _HelloRequest_TransferBytesReq_default_instance_;
}  // namespace HelloWorld
PROTOBUF_NAMESPACE_OPEN
template<> ::HelloWorld::HelloReply* Arena::CreateMaybeMessage<::HelloWorld::HelloReply>(Arena*);
template<> ::HelloWorld::HelloReply_TransferBytesResp* Arena::CreateMaybeMessage<::HelloWorld::HelloReply_TransferBytesResp>(Arena*);
template<> ::HelloWorld::HelloRequest* Arena::CreateMaybeMessage<::HelloWorld::HelloRequest>(Arena*);
template<> ::HelloWorld::HelloRequest_TransferBytesReq* Arena::CreateMaybeMessage<::HelloWorld::HelloRequest_TransferBytesReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HelloWorld {

// ===================================================================

class HelloRequest_TransferBytesReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HelloWorld.HelloRequest.TransferBytesReq) */ {
 public:
  inline HelloRequest_TransferBytesReq() : HelloRequest_TransferBytesReq(nullptr) {}
  ~HelloRequest_TransferBytesReq() override;
  explicit PROTOBUF_CONSTEXPR HelloRequest_TransferBytesReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest_TransferBytesReq(const HelloRequest_TransferBytesReq& from);
  HelloRequest_TransferBytesReq(HelloRequest_TransferBytesReq&& from) noexcept
    : HelloRequest_TransferBytesReq() {
    *this = ::std::move(from);
  }

  inline HelloRequest_TransferBytesReq& operator=(const HelloRequest_TransferBytesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest_TransferBytesReq& operator=(HelloRequest_TransferBytesReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest_TransferBytesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest_TransferBytesReq* internal_default_instance() {
    return reinterpret_cast<const HelloRequest_TransferBytesReq*>(
               &_HelloRequest_TransferBytesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloRequest_TransferBytesReq& a, HelloRequest_TransferBytesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest_TransferBytesReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest_TransferBytesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest_TransferBytesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest_TransferBytesReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest_TransferBytesReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest_TransferBytesReq& from) {
    HelloRequest_TransferBytesReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest_TransferBytesReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelloWorld.HelloRequest.TransferBytesReq";
  }
  protected:
  explicit HelloRequest_TransferBytesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:HelloWorld.HelloRequest.TransferBytesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};
// -------------------------------------------------------------------

class HelloRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HelloWorld.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  ~HelloRequest() override;
  explicit PROTOBUF_CONSTEXPR HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloRequest& from) {
    HelloRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelloWorld.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HelloRequest_TransferBytesReq TransferBytesReq;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTransferBytesReqFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .HelloWorld.HelloRequest.TransferBytesReq transferBytesReq = 1;
  bool has_transferbytesreq() const;
  private:
  bool _internal_has_transferbytesreq() const;
  public:
  void clear_transferbytesreq();
  const ::HelloWorld::HelloRequest_TransferBytesReq& transferbytesreq() const;
  PROTOBUF_NODISCARD ::HelloWorld::HelloRequest_TransferBytesReq* release_transferbytesreq();
  ::HelloWorld::HelloRequest_TransferBytesReq* mutable_transferbytesreq();
  void set_allocated_transferbytesreq(::HelloWorld::HelloRequest_TransferBytesReq* transferbytesreq);
  private:
  const ::HelloWorld::HelloRequest_TransferBytesReq& _internal_transferbytesreq() const;
  ::HelloWorld::HelloRequest_TransferBytesReq* _internal_mutable_transferbytesreq();
  public:
  void unsafe_arena_set_allocated_transferbytesreq(
      ::HelloWorld::HelloRequest_TransferBytesReq* transferbytesreq);
  ::HelloWorld::HelloRequest_TransferBytesReq* unsafe_arena_release_transferbytesreq();

  // @@protoc_insertion_point(class_scope:HelloWorld.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::HelloWorld::HelloRequest_TransferBytesReq* transferbytesreq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};
// -------------------------------------------------------------------

class HelloReply_TransferBytesResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HelloWorld.HelloReply.TransferBytesResp) */ {
 public:
  inline HelloReply_TransferBytesResp() : HelloReply_TransferBytesResp(nullptr) {}
  ~HelloReply_TransferBytesResp() override;
  explicit PROTOBUF_CONSTEXPR HelloReply_TransferBytesResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply_TransferBytesResp(const HelloReply_TransferBytesResp& from);
  HelloReply_TransferBytesResp(HelloReply_TransferBytesResp&& from) noexcept
    : HelloReply_TransferBytesResp() {
    *this = ::std::move(from);
  }

  inline HelloReply_TransferBytesResp& operator=(const HelloReply_TransferBytesResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply_TransferBytesResp& operator=(HelloReply_TransferBytesResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply_TransferBytesResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply_TransferBytesResp* internal_default_instance() {
    return reinterpret_cast<const HelloReply_TransferBytesResp*>(
               &_HelloReply_TransferBytesResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HelloReply_TransferBytesResp& a, HelloReply_TransferBytesResp& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply_TransferBytesResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply_TransferBytesResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply_TransferBytesResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply_TransferBytesResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply_TransferBytesResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply_TransferBytesResp& from) {
    HelloReply_TransferBytesResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply_TransferBytesResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelloWorld.HelloReply.TransferBytesResp";
  }
  protected:
  explicit HelloReply_TransferBytesResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:HelloWorld.HelloReply.TransferBytesResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};
// -------------------------------------------------------------------

class HelloReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HelloWorld.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  ~HelloReply() override;
  explicit PROTOBUF_CONSTEXPR HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloReply& from) {
    HelloReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HelloWorld.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HelloReply_TransferBytesResp TransferBytesResp;

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTransferBytesRespFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .HelloWorld.HelloReply.TransferBytesResp transferBytesResp = 1;
  bool has_transferbytesresp() const;
  private:
  bool _internal_has_transferbytesresp() const;
  public:
  void clear_transferbytesresp();
  const ::HelloWorld::HelloReply_TransferBytesResp& transferbytesresp() const;
  PROTOBUF_NODISCARD ::HelloWorld::HelloReply_TransferBytesResp* release_transferbytesresp();
  ::HelloWorld::HelloReply_TransferBytesResp* mutable_transferbytesresp();
  void set_allocated_transferbytesresp(::HelloWorld::HelloReply_TransferBytesResp* transferbytesresp);
  private:
  const ::HelloWorld::HelloReply_TransferBytesResp& _internal_transferbytesresp() const;
  ::HelloWorld::HelloReply_TransferBytesResp* _internal_mutable_transferbytesresp();
  public:
  void unsafe_arena_set_allocated_transferbytesresp(
      ::HelloWorld::HelloReply_TransferBytesResp* transferbytesresp);
  ::HelloWorld::HelloReply_TransferBytesResp* unsafe_arena_release_transferbytesresp();

  // @@protoc_insertion_point(class_scope:HelloWorld.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::HelloWorld::HelloReply_TransferBytesResp* transferbytesresp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_helloworld_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest_TransferBytesReq

// bytes data = 1;
inline void HelloRequest_TransferBytesReq::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& HelloRequest_TransferBytesReq::data() const {
  // @@protoc_insertion_point(field_get:HelloWorld.HelloRequest.TransferBytesReq.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloRequest_TransferBytesReq::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HelloWorld.HelloRequest.TransferBytesReq.data)
}
inline std::string* HelloRequest_TransferBytesReq::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:HelloWorld.HelloRequest.TransferBytesReq.data)
  return _s;
}
inline const std::string& HelloRequest_TransferBytesReq::_internal_data() const {
  return _impl_.data_.Get();
}
inline void HelloRequest_TransferBytesReq::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest_TransferBytesReq::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloRequest_TransferBytesReq::release_data() {
  // @@protoc_insertion_point(field_release:HelloWorld.HelloRequest.TransferBytesReq.data)
  return _impl_.data_.Release();
}
inline void HelloRequest_TransferBytesReq::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.HelloRequest.TransferBytesReq.data)
}

// -------------------------------------------------------------------

// HelloRequest

// .HelloWorld.HelloRequest.TransferBytesReq transferBytesReq = 1;
inline bool HelloRequest::_internal_has_transferbytesreq() const {
  return this != internal_default_instance() && _impl_.transferbytesreq_ != nullptr;
}
inline bool HelloRequest::has_transferbytesreq() const {
  return _internal_has_transferbytesreq();
}
inline void HelloRequest::clear_transferbytesreq() {
  if (GetArenaForAllocation() == nullptr && _impl_.transferbytesreq_ != nullptr) {
    delete _impl_.transferbytesreq_;
  }
  _impl_.transferbytesreq_ = nullptr;
}
inline const ::HelloWorld::HelloRequest_TransferBytesReq& HelloRequest::_internal_transferbytesreq() const {
  const ::HelloWorld::HelloRequest_TransferBytesReq* p = _impl_.transferbytesreq_;
  return p != nullptr ? *p : reinterpret_cast<const ::HelloWorld::HelloRequest_TransferBytesReq&>(
      ::HelloWorld::_HelloRequest_TransferBytesReq_default_instance_);
}
inline const ::HelloWorld::HelloRequest_TransferBytesReq& HelloRequest::transferbytesreq() const {
  // @@protoc_insertion_point(field_get:HelloWorld.HelloRequest.transferBytesReq)
  return _internal_transferbytesreq();
}
inline void HelloRequest::unsafe_arena_set_allocated_transferbytesreq(
    ::HelloWorld::HelloRequest_TransferBytesReq* transferbytesreq) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transferbytesreq_);
  }
  _impl_.transferbytesreq_ = transferbytesreq;
  if (transferbytesreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HelloWorld.HelloRequest.transferBytesReq)
}
inline ::HelloWorld::HelloRequest_TransferBytesReq* HelloRequest::release_transferbytesreq() {
  
  ::HelloWorld::HelloRequest_TransferBytesReq* temp = _impl_.transferbytesreq_;
  _impl_.transferbytesreq_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HelloWorld::HelloRequest_TransferBytesReq* HelloRequest::unsafe_arena_release_transferbytesreq() {
  // @@protoc_insertion_point(field_release:HelloWorld.HelloRequest.transferBytesReq)
  
  ::HelloWorld::HelloRequest_TransferBytesReq* temp = _impl_.transferbytesreq_;
  _impl_.transferbytesreq_ = nullptr;
  return temp;
}
inline ::HelloWorld::HelloRequest_TransferBytesReq* HelloRequest::_internal_mutable_transferbytesreq() {
  
  if (_impl_.transferbytesreq_ == nullptr) {
    auto* p = CreateMaybeMessage<::HelloWorld::HelloRequest_TransferBytesReq>(GetArenaForAllocation());
    _impl_.transferbytesreq_ = p;
  }
  return _impl_.transferbytesreq_;
}
inline ::HelloWorld::HelloRequest_TransferBytesReq* HelloRequest::mutable_transferbytesreq() {
  ::HelloWorld::HelloRequest_TransferBytesReq* _msg = _internal_mutable_transferbytesreq();
  // @@protoc_insertion_point(field_mutable:HelloWorld.HelloRequest.transferBytesReq)
  return _msg;
}
inline void HelloRequest::set_allocated_transferbytesreq(::HelloWorld::HelloRequest_TransferBytesReq* transferbytesreq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transferbytesreq_;
  }
  if (transferbytesreq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transferbytesreq);
    if (message_arena != submessage_arena) {
      transferbytesreq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transferbytesreq, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transferbytesreq_ = transferbytesreq;
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.HelloRequest.transferBytesReq)
}

// string name = 2;
inline void HelloRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:HelloWorld.HelloRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HelloWorld.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:HelloWorld.HelloRequest.name)
  return _s;
}
inline const std::string& HelloRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:HelloWorld.HelloRequest.name)
  return _impl_.name_.Release();
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply_TransferBytesResp

// bytes data = 1;
inline void HelloReply_TransferBytesResp::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& HelloReply_TransferBytesResp::data() const {
  // @@protoc_insertion_point(field_get:HelloWorld.HelloReply.TransferBytesResp.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReply_TransferBytesResp::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HelloWorld.HelloReply.TransferBytesResp.data)
}
inline std::string* HelloReply_TransferBytesResp::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:HelloWorld.HelloReply.TransferBytesResp.data)
  return _s;
}
inline const std::string& HelloReply_TransferBytesResp::_internal_data() const {
  return _impl_.data_.Get();
}
inline void HelloReply_TransferBytesResp::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply_TransferBytesResp::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReply_TransferBytesResp::release_data() {
  // @@protoc_insertion_point(field_release:HelloWorld.HelloReply.TransferBytesResp.data)
  return _impl_.data_.Release();
}
inline void HelloReply_TransferBytesResp::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.HelloReply.TransferBytesResp.data)
}

// -------------------------------------------------------------------

// HelloReply

// .HelloWorld.HelloReply.TransferBytesResp transferBytesResp = 1;
inline bool HelloReply::_internal_has_transferbytesresp() const {
  return this != internal_default_instance() && _impl_.transferbytesresp_ != nullptr;
}
inline bool HelloReply::has_transferbytesresp() const {
  return _internal_has_transferbytesresp();
}
inline void HelloReply::clear_transferbytesresp() {
  if (GetArenaForAllocation() == nullptr && _impl_.transferbytesresp_ != nullptr) {
    delete _impl_.transferbytesresp_;
  }
  _impl_.transferbytesresp_ = nullptr;
}
inline const ::HelloWorld::HelloReply_TransferBytesResp& HelloReply::_internal_transferbytesresp() const {
  const ::HelloWorld::HelloReply_TransferBytesResp* p = _impl_.transferbytesresp_;
  return p != nullptr ? *p : reinterpret_cast<const ::HelloWorld::HelloReply_TransferBytesResp&>(
      ::HelloWorld::_HelloReply_TransferBytesResp_default_instance_);
}
inline const ::HelloWorld::HelloReply_TransferBytesResp& HelloReply::transferbytesresp() const {
  // @@protoc_insertion_point(field_get:HelloWorld.HelloReply.transferBytesResp)
  return _internal_transferbytesresp();
}
inline void HelloReply::unsafe_arena_set_allocated_transferbytesresp(
    ::HelloWorld::HelloReply_TransferBytesResp* transferbytesresp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transferbytesresp_);
  }
  _impl_.transferbytesresp_ = transferbytesresp;
  if (transferbytesresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HelloWorld.HelloReply.transferBytesResp)
}
inline ::HelloWorld::HelloReply_TransferBytesResp* HelloReply::release_transferbytesresp() {
  
  ::HelloWorld::HelloReply_TransferBytesResp* temp = _impl_.transferbytesresp_;
  _impl_.transferbytesresp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HelloWorld::HelloReply_TransferBytesResp* HelloReply::unsafe_arena_release_transferbytesresp() {
  // @@protoc_insertion_point(field_release:HelloWorld.HelloReply.transferBytesResp)
  
  ::HelloWorld::HelloReply_TransferBytesResp* temp = _impl_.transferbytesresp_;
  _impl_.transferbytesresp_ = nullptr;
  return temp;
}
inline ::HelloWorld::HelloReply_TransferBytesResp* HelloReply::_internal_mutable_transferbytesresp() {
  
  if (_impl_.transferbytesresp_ == nullptr) {
    auto* p = CreateMaybeMessage<::HelloWorld::HelloReply_TransferBytesResp>(GetArenaForAllocation());
    _impl_.transferbytesresp_ = p;
  }
  return _impl_.transferbytesresp_;
}
inline ::HelloWorld::HelloReply_TransferBytesResp* HelloReply::mutable_transferbytesresp() {
  ::HelloWorld::HelloReply_TransferBytesResp* _msg = _internal_mutable_transferbytesresp();
  // @@protoc_insertion_point(field_mutable:HelloWorld.HelloReply.transferBytesResp)
  return _msg;
}
inline void HelloReply::set_allocated_transferbytesresp(::HelloWorld::HelloReply_TransferBytesResp* transferbytesresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transferbytesresp_;
  }
  if (transferbytesresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transferbytesresp);
    if (message_arena != submessage_arena) {
      transferbytesresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transferbytesresp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transferbytesresp_ = transferbytesresp;
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.HelloReply.transferBytesResp)
}

// string message = 2;
inline void HelloReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:HelloWorld.HelloReply.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloReply::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HelloWorld.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:HelloWorld.HelloReply.message)
  return _s;
}
inline const std::string& HelloReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloReply::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:HelloWorld.HelloReply.message)
  return _impl_.message_.Release();
}
inline void HelloReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HelloWorld.HelloReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HelloWorld

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_helloworld_2eproto
